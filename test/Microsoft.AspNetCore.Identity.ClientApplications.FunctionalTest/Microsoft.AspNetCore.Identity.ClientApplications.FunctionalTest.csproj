<Project Sdk="Microsoft.NET.Sdk">

  <Import Project="..\..\build\common.props" />

  <PropertyGroup>
    <TargetFrameworks>netcoreapp2.0;net461</TargetFrameworks>
    <TargetFrameworks Condition=" '$(OS)' != 'Windows_NT' ">netcoreapp2.0</TargetFrameworks>
    <PackageTargetFallback Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">$(PackageTargetFallback);portable-net451+win8</PackageTargetFallback>

    <!--
      The functional tests act as the host application for all test websites. Since the CLI copies all reference
      assembly dependencies in websites to their corresponding bin/{config}/refs folder we need to re-calculate
      reference assemblies for this project so there's a corresponding refs folder in our output. Without it
      our websites deps files will fail to find their assembly referenes.
    -->
    <PreserveCompilationContext>true</PreserveCompilationContext>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' != 'netcoreapp2.0' ">
    <!-- Work around https://github.com/dotnet/sdk/issues/926. Align with bitness of the web site projects. -->
    <PlatformTarget>x86</PlatformTarget>

    <!--
      Work around https://github.com/Microsoft/vstest/issues/428 aka https://github.com/aspnet/Mvc/issues/5873.
      Create the appropriate binding redirects.
    -->
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
  </PropertyGroup>

  <ItemGroup>
    <!--
      Work around https://github.com/Microsoft/vstest/issues/196. Execute tests with assemblies in the bin folder, not
      a temporary location. Unable to find the web site project folders otherwise.
    -->
    <None Include="xunit.runner.json" CopyToOutputDirectory="PreserveNewest" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\WebSites\Identity.ClientApplications.WebSite\Identity.ClientApplications.WebSite.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Logging.Testing" Version="$(AspNetCoreVersion)" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="$(TestSdkVersion)" />
    <PackageReference Include="xunit" Version="$(XunitVersion)" />
    <PackageReference Include="xunit.runner.visualstudio" Version="$(XunitVersion)" />
  </ItemGroup>
  
  <ItemGroup>
    <Reference Include="Microsoft.AspNetCore.Mvc.Testing">
      <HintPath>..\..\..\Mvc\test\Microsoft.AspNetCore.Mvc.Testing\bin\Debug\netstandard2.0\Microsoft.AspNetCore.Mvc.Testing.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.AspNetCore.TestHost">
      <HintPath>..\..\..\Hosting\src\Microsoft.AspNetCore.TestHost\bin\Debug\netstandard2.0\Microsoft.AspNetCore.TestHost.dll</HintPath>
    </Reference>
  </ItemGroup>

  <!--
    Work around https://github.com/NuGet/Home/issues/4412. MVC uses DependencyContext.Load() which looks next to a .dll
    for a .deps.json. Information isn't available elsewhere. Need the .deps.json file for all web site applications.
  -->
  <Target Name="CopyDepsFiles" AfterTargets="Build" Condition="'$(TargetFramework)'!=''">
    <ItemGroup>
      <DepsFilePaths Include="$([System.IO.Path]::ChangeExtension('%(_ResolvedProjectReferencePaths.FullPath)', '.deps.json'))" />
    </ItemGroup>

    <Copy SourceFiles="%(DepsFilePaths.FullPath)" DestinationFolder="$(OutputPath)" Condition="Exists('%(DepsFilePaths.FullPath)')" />
  </Target>
</Project>
